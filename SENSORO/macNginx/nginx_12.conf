#如何发起新 HTTP 请求  http://wiki.jikexueyuan.com/project/openresty/openresty/how_request_http.html
worker_processes auto;
error_log /Users/sensoro/bynf/ngx_work/logs/error.log info;
pid /Users/sensoro/bynf/ngx_work/logs/nginx.pid;

events {
    worker_connections 256;
}

http {
    log_format  main  '$remote_addr - $request_time [$time_local] "$request" "$http_deviceinfo" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" "$http_host"';
    access_log /Users/sensoro/bynf/ngx_work/logs/access.log main;

    upstream md5_server {
        server 127.0.0.1:6758;
        keepalive 20;
    }

    server {
        listen 6757;
        server_name localhost;

        location /test {    # curl "127.0.0.1:6757/test?data=abcd&key=e2fc714c4727ee9395f324cd2e7f331f"
            content_by_lua_block {
                ngx.req.read_body();
                local args, err = ngx.req.get_uri_args();

                ngx.log(ngx.INFO, "===== test request: ", ngx.var.request);

                local res = ngx.location.capture("/spe_md5",
                    {
                        method = ngx.HTTP_POST,
                        body = args.data
                    }
                );

                if 200 ~= res.status then
                    ngx.exit(res.status);
                end
                ngx.log(ngx.INFO, "===== test res.body: ", res.body);
                if args.key == res.body then
                    ngx.say("valid request");
                else
                    ngx.say("invaild request");
                end
            }
        }
        location /spe_md5 {
            proxy_pass http://md5_server;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }

    server {
        listen 6758;
        server_name localhost;

        location /spe_md5 {
            content_by_lua_block {
                ngx.log(ngx.INFO, "===== 6758 spe_md5 request: ", ngx.var.request);
                ngx.req.read_body();
                local data = ngx.req.get_body_data();
                ngx.print(ngx.md5(data));
            }
        }
    }

    lua_package_path '/Users/sensoro/bynf/test/SENSORO/macNginx/?.lua;;';
    server {
        listen 6759;
        server_name localhost;

        location /test {        #curl "127.0.0.1:6759/test?data=abcd&key=e2fc714c4727ee9395f324cd2e7f331f"
            content_by_lua_block {
                ngx.req.read_body();
                local args, err = ngx.req.get_uri_args();

                local http = require "resty.http";
                local httpc = http.new();
                local res, err = httpc:request_uri(
                    "http://127.0.0.1:6758/spe_md5",
                    {
                        method = "POST",
                        body = args.data
                    }
                );

                if 200 ~= res.status then
                    ngx.exit(res.status);
                end

                if args.key == res.body then
                    ngx.say("valid request");
                else
                    ngx.say("invaild request");
                end
            }
        }
    }
}