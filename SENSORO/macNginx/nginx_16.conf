#json解析
worker_processes auto;
error_log /Users/sensoro/bynf/ngx_work/logs/error.log info;
pid /Users/sensoro/bynf/ngx_work/logs/nginx.pid;

events {
    worker_connections 256;
}

http {
    log_format  main  '$remote_addr - $request_time [$time_local] "$request" "$http_deviceinfo" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" "$http_host"';
    access_log /Users/sensoro/bynf/ngx_work/logs/access.log main;
    lua_package_path '/Users/sensoro/bynf/test/SENSORO/macNginx/?.lua;;';

    server {
        listen 6763;
        server_name localhost;

        location /test1 {    #curl "127.0.0.1:6763/test1"
            content_by_lua_block {
                local json = require "cjson";
                local data = {1, 2};
                local dataJson = json.encode(data);
                ngx.log(ngx.INFO, string.format("==== data: %s ====", dataJson));
                ngx.say(dataJson);
            }
        }

        location /test2 {   #curl "127.0.0.1:6763/test2" => {"1":1,"2":2,"1000":99}
            content_by_lua_block {
                local json = require "cjson";
                local data = {1, 2};
                data[1000] = 99;    --创建稀疏数组
                local dataJson = json.encode_sparse_array(true); --没有这条代码下边的encode就会失败
                local dataJson = json.encode(data); -- error: stack traceback
                ngx.log(ngx.INFO, string.format("==== data: %s ====", dataJson));
                ngx.say(dataJson);
            }
        }

        location /test3 {   # curl "127.0.0.1:6763/test3" => {}
            content_by_lua_block {
                local json = require "cjson";
                local data = {};    --空字典
                local dataJson = json.encode(data);
                ngx.log(ngx.INFO, string.format("==== data: %s ====", dataJson));
                ngx.say(dataJson);
            }
        }

        location /test4 {       # curl "127.0.0.1:6763/test4" => []
            content_by_lua_block {
                local json = require "cjson";
                json.encode_empty_table_as_object(false); --关闭转换空字典为对象
                local data = {};
                local dataJson = json.encode(data);
                ngx.log(ngx.INFO, string.format("==== data: %s ====", dataJson));
                ngx.say(dataJson);
            }
        }
    }
}
