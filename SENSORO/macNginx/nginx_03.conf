#练习location配合使用
worker_processes 8;
error_log logs/error.log;
events {
    worker_connections 512;
}

http {
    log_format myformat $remote_addr'$http_x_forwarded_for'$remote_user'$time_local'$request'$status'$body_bytes_sent'$http_referer'$http_user_agent'$host'$cookie_ssl_edition'$upstream_addr'$upstream_status'$request_time'$upstream_response_time;
    access_log logs/access.log myformat;

    server {
        listen 6700;
        server_name localhost;

        location = /sum {
            internal;   #只允许内部调用
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /app/test {  #curl "127.0.0.1:6700/app/test?aa=10&bb=20"  =>status: 200 response: 30
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                local res = ngx.location.capture("/sum", {args={a=arg.aa,b=arg.bb}})
                ngx.say("status: ", res.status, " response: ", res.body)
            }
        }
    }

    server {
        listen 6701;
        server_name localhost;

        location = /add {
        	internal;
        	content_by_lua_block {
        		ngx.sleep(0.1)
        		local args = ngx.req.get_uri_args()
        		ngx.print(tonumber(args.a) + tonumber(args.b))
        	}
        }

        location = /sub {
        	internal;
        	content_by_lua_block {
        		ngx.sleep(0.1);
        		local args = ngx.req.get_uri_args()
        		ngx.print(tonumber(args.a) - tonumber(args.b))
        	}
        }

        location = /app/test_parallels { #curl "127.0.0.1:6701/app/test_parallels?aa=1111&bb=222"  并行执行
        	content_by_lua_block {
        		local start_time = ngx.now()
        		local arg = ngx.req.get_uri_args()
        		local res1, res2 = ngx.location.capture_multi({
                    {"/add", {args={a=arg.aa, b=arg.bb}}},
        		    {"/sub", {args={a=arg.aa, b=arg.bb}}}
        	    })
        		ngx.say("status:", res1.status, " response:", res1.body)
        		ngx.say("status:", res2.status, " response:", res2.body)
        		ngx.say("time used:", ngx.now() - start_time)
        	}
        }

        location = /app/test_queue {    #curl "127.0.0.1:6701/app/test_queue?aa=123&bb=456"  串行执行
            content_by_lua_block {
                local start_time = ngx.now()
                local arg = ngx.req.get_uri_args()
                local res1 = ngx.location.capture_multi({
                    {"/add", {args = {a = arg.aa, b = arg.bb}}}
                })
                local res2 = ngx.location.capture_multi({
                    {"/sub", {args = {a = arg.aa, b = arg.bb}}}
                })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }
    }

    server {
        listen 6702;
        server_name localhost;

        location ~ ^/static/([-_a-zA-Z0-9/]+).jpg { #http://127.0.0.1:6702/static/test.jpg 浏览器中打开会显示一张图片
            set $image_name $1;
            content_by_lua_block {
                ngx.exec("/download_internal/" .. ngx.var.image_name .. ".jpg");
            }
        }
        location /download_internal {
            internal;
            alias ./;
        }

        location = /image { #http://127.0.0.1:6702/image  浏览器中访问会显示一张图(注意:使用相对目录时,当前目录为nginx工作目录)
            alias /Users/sensoro/bynf/test/SENSORO/macNginx/test.jpg;
        }
    }

    server {
        listen 6703;
        server_name localhost;

        location = /foo {
            content_by_lua_block {
                ngx.say([[I am foo]]);
            }
        }

        location = / {  #浏览器访问 127.0.0.1:6703/ 会重定向到127.0.0.1:6703/foo
            rewrite_by_lua_block {
                return ngx.redirect("/foo");
            }
        }
    }
}