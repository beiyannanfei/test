worker_processes auto;
error_log /Users/sensoro/bynf/ngx_work/logs/error.log info;
pid /Users/sensoro/bynf/ngx_work/logs/nginx.pid;

events {
    worker_connections 256;
}

http {
    log_format  main  '$remote_addr - $request_time [$time_local] "$request" "$http_deviceinfo" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" "$http_host"';
    access_log /Users/sensoro/bynf/ngx_work/logs/access.log main;
    lua_package_path '/Users/sensoro/bynf/test/SENSORO/openresty/?.lua;;';

    server {
        listen 8815;
        server_name localhost;

        location /test {    # curl "127.0.0.1:8815/test"
            set_by_lua $a 'ngx.log(ngx.INFO, "set_by_lua=== 111")'; #流程分支处理判断变量初始化
            rewrite_by_lua 'ngx.log(ngx.INFO, "rewrite_by_lua===222")'; #转发、重定向、缓存等功能(例如特定请求代理到外网)
            access_by_lua 'ngx.log(ngx.INFO, "access_by_lua=== 333")'; #IP准入、接口权限等情况集中处理(例如配合iptable完成简单防火墙)
            content_by_lua 'ngx.log(ngx.INFO, "content_by_lua=== 444")'; #内容生成
            header_filter_by_lua 'ngx.log(ngx.INFO, "header_filter_by_lua=== 555")'; #应答HTTP过滤处理(例如添加头部信息)
            body_filter_by_lua 'ngx.log(ngx.INFO, "body_filter_by_lua=== 666")'; #应答BODY过滤处理(例如完成应答内容统一成大写)
            log_by_lua 'ngx.log(ngx.INFO, "log_by_lua=== 777")'; #会话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)
        }

        location /test2 {   # curl "127.0.0.1:8815/test2"
            content_by_lua_block {
                ngx.say("aaa");
                ngx.say("bbb");
            }
            body_filter_by_lua_block {
                ngx.arg[1] = string.upper(ngx.arg[1]);
            }
        }

        location /test3 {      # curl "127.0.0.1:8815/test3"
            content_by_lua_block {
                ngx.say("aaa");
                ngx.print("bbb");
            }
            body_filter_by_lua_block {
                if ngx.arg[1] == "aaa\n" then   --注意: ngx.say会在输出内容后加入\n换行
                    ngx.arg[1] = string.upper(ngx.arg[1]);
                end
                if ngx.arg[1] == "bbb" then     --注意: ngx.print直接输出内容
                    ngx.arg[1] = string.upper(ngx.arg[1]);
                end
            }
        }

        location /test4 {     # curl "127.0.0.1:8815/test4"
            content_by_lua_block {
                ngx.say("aaa");
                ngx.say("bbb");
            }
            body_filter_by_lua_block {
                if ngx.arg[1] == "aaa\n" then
                    ngx.arg[1] = string.upper(ngx.arg[1]);
                    ngx.arg[2] = true;  -- 设置eof,截断输出,此时只会输出AAA
                    return;
                end
            }
        }

        location /test5 {        # curl "127.0.0.1:8815/test5"
            content_by_lua_block {
                local json = require "cjson";
                ngx.print(json.encode({a="aaa", b=123}));
            }
            body_filter_by_lua_block {
                local json = require "cjson";
                local t = json.decode(ngx.arg[1]);  --注意: 不能将解析后的值在赋值给ngx.arg[1]
                t.a = string.upper(t.a);
                t.b = t.b * 2;
                t.c = {1,2,3};
                ngx.arg[1] = json.encode(t) .. "\n";
                ngx.arg[2] = true;                  --注意: 没有这句代码会报错
            }
        }
    }
}