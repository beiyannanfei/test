worker_processes auto;
error_log /Users/sensoro/bynf/ngx_work/logs/error.log;
pid /Users/sensoro/bynf/ngx_work/logs/nginx.pid;

events {
    worker_connections 256;
}

http {
    log_format  main  '$remote_addr - $request_time [$time_local] "$request" "$http_deviceinfo" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_host"';
    access_log /Users/sensoro/bynf/ngx_work/logs/access.log main;

    server {        #内部调用
        listen 8802;
        server_name localhost;

        location = /sum {
            internal;   #只允许内部调用
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /app/test {  #curl "127.0.0.1:8802/app/test?aa=10&bb=20"   =>  status: 200 response: 30
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                local res = ngx.location.capture("/sum", {args={a=arg.aa,b=arg.bb}})
                ngx.say("status: ", res.status, " response: ", res.body)
            }
        }
    }

    server {    #并行&串行
        listen 8803;
        server_name localhost;

        location = /add {
        	internal;
        	content_by_lua_block {
        		ngx.sleep(0.1)
        		local args = ngx.req.get_uri_args()
        		ngx.print(tonumber(args.a) + tonumber(args.b))
        	}
        }

        location = /sub {
        	internal;
        	content_by_lua_block {
        		ngx.sleep(0.1);
        		local args = ngx.req.get_uri_args()
        		ngx.print(tonumber(args.a) - tonumber(args.b))
        	}
        }

        location = /app/test_parallels { #curl "127.0.0.1:8803/app/test_parallels?aa=30&bb=20"  并行执行
        	content_by_lua_block {
        		local start_time = ngx.now()
        		local arg = ngx.req.get_uri_args()
        		local res1, res2 = ngx.location.capture_multi({
                    {"/add", {args={a=arg.aa, b=arg.bb}}},
        		    {"/sub", {args={a=arg.aa, b=arg.bb}}}
        	    })
        		ngx.say("status:", res1.status, " response:", res1.body)
        		ngx.say("status:", res2.status, " response:", res2.body)
        		ngx.say("time used:", ngx.now() - start_time)
        	}
        }

        location = /app/test_queue {    #curl "127.0.0.1:8803/app/test_queue?aa=30&bb=20"  串行执行
            content_by_lua_block {
                local start_time = ngx.now()
                local arg = ngx.req.get_uri_args()
                local res1 = ngx.location.capture_multi({
                    {"/add", {args = {a = arg.aa, b = arg.bb}}}
                })
                local res2 = ngx.location.capture_multi({
                    {"/sub", {args = {a = arg.aa, b = arg.bb}}}
                })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }
    }

    server {    #流水线方式跳转
        listen 8804;
        server_name localhost;

        location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {                     #http://127.0.0.1:8804/static/test.jpg
            set $image_name $1;
            content_by_lua_block {
                ngx.exec("/download_internal/" .. ngx.var.image_name .. ".jpg");
                --ngx.exec("/download_internal/openresty/" .. ngx.var.image_name .. ".jpg");
            }
        }
        location /download_internal {
            internal;
            alias /Users/sensoro/bynf/test/SENSORO/openresty/;
            #alias /Users/sensoro/bynf/test/SENSORO/;
        }
    }

    server {    #外部重定向
        listen 8805;
        server_name localhost;

        location = /foo {
            content_by_lua_block {
                ngx.say("I am foo");
            }
        }

        location = / {  # curl "127.0.0.1:8805/" -i
            rewrite_by_lua_block {
                return ngx.redirect("/foo");
            }
        }
    }
}